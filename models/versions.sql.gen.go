// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: versions.sql

package models

import (
	"context"
)

const getVersion = `-- name: GetVersion :one
SELECT
    os_version,
    osquery_version
FROM
    versions
`

type GetVersionRow struct {
	OsVersion      string `json:"os_version"`
	OsqueryVersion string `json:"osquery_version"`
}

func (q *Queries) GetVersion(ctx context.Context) (GetVersionRow, error) {
	row := q.queryRow(ctx, q.getVersionStmt, getVersion)
	var i GetVersionRow
	err := row.Scan(&i.OsVersion, &i.OsqueryVersion)
	return i, err
}

const upsertVersions = `-- name: UpsertVersions :exec
INSERT INTO versions (
    os_version,
    osquery_version
) VALUES (
    $1, $2
) ON CONFLICT (os_version, osquery_version) DO UPDATE SET
    os_version = $1,
    osquery_version = $2,
    updated_at = NOW()
`

type UpsertVersionsParams struct {
	OsVersion      string `json:"os_version"`
	OsqueryVersion string `json:"osquery_version"`
}

func (q *Queries) UpsertVersions(ctx context.Context, arg UpsertVersionsParams) error {
	_, err := q.exec(ctx, q.upsertVersionsStmt, upsertVersions, arg.OsVersion, arg.OsqueryVersion)
	return err
}
