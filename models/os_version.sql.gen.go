// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: os_version.sql

package models

import (
	"context"
	"database/sql"
)

const getOSDetails = `-- name: GetOSDetails :one
SELECT 
    id,
    name,
    version,
    major,
    minor,
    patch,
    build,
    platform,
    platform_like,
    codename,
    arch,
    extra,
    install_date,
    revision,
    pid_with_namespace,
    mount_namespace_id,
    created_at,
    updated_at
FROM
    os_version
`

func (q *Queries) GetOSDetails(ctx context.Context) (OsVersion, error) {
	row := q.queryRow(ctx, q.getOSDetailsStmt, getOSDetails)
	var i OsVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.Major,
		&i.Minor,
		&i.Patch,
		&i.Build,
		&i.Platform,
		&i.PlatformLike,
		&i.Codename,
		&i.Arch,
		&i.Extra,
		&i.InstallDate,
		&i.Revision,
		&i.PidWithNamespace,
		&i.MountNamespaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertOSDetails = `-- name: UpsertOSDetails :one
INSERT INTO os_version (
    name,
    version,
    major,
    minor,
    patch,
    build,
    platform,
    platform_like,
    codename,
    arch,
    extra,
    install_date,
    revision,
    pid_with_namespace,
    mount_namespace_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
) ON CONFLICT (name, version) DO UPDATE SET
    name = $1,
    major = $3,
    minor = $4,
    patch = $5,
    build = $6,
    platform_like = $8,
    codename = $9,
    arch = $10,
    extra = $11,
    install_date = $12,
    revision = $13,
    pid_with_namespace = $14,
    mount_namespace_id = $15,
    updated_at = NOW()
RETURNING id, name, version, major, minor, patch, build, platform, platform_like, 
          codename, arch, extra, install_date, revision, pid_with_namespace, 
          mount_namespace_id, created_at, updated_at
`

type UpsertOSDetailsParams struct {
	Name             string         `json:"name"`
	Version          string         `json:"version"`
	Major            sql.NullInt32  `json:"major"`
	Minor            sql.NullInt32  `json:"minor"`
	Patch            sql.NullInt32  `json:"patch"`
	Build            sql.NullString `json:"build"`
	Platform         sql.NullString `json:"platform"`
	PlatformLike     sql.NullString `json:"platform_like"`
	Codename         sql.NullString `json:"codename"`
	Arch             sql.NullString `json:"arch"`
	Extra            sql.NullString `json:"extra"`
	InstallDate      sql.NullInt64  `json:"install_date"`
	Revision         sql.NullInt32  `json:"revision"`
	PidWithNamespace sql.NullInt32  `json:"pid_with_namespace"`
	MountNamespaceID sql.NullString `json:"mount_namespace_id"`
}

func (q *Queries) UpsertOSDetails(ctx context.Context, arg UpsertOSDetailsParams) (OsVersion, error) {
	row := q.queryRow(ctx, q.upsertOSDetailsStmt, upsertOSDetails,
		arg.Name,
		arg.Version,
		arg.Major,
		arg.Minor,
		arg.Patch,
		arg.Build,
		arg.Platform,
		arg.PlatformLike,
		arg.Codename,
		arg.Arch,
		arg.Extra,
		arg.InstallDate,
		arg.Revision,
		arg.PidWithNamespace,
		arg.MountNamespaceID,
	)
	var i OsVersion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Version,
		&i.Major,
		&i.Minor,
		&i.Patch,
		&i.Build,
		&i.Platform,
		&i.PlatformLike,
		&i.Codename,
		&i.Arch,
		&i.Extra,
		&i.InstallDate,
		&i.Revision,
		&i.PidWithNamespace,
		&i.MountNamespaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
