// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: osquery_info.sql

package models

import (
	"context"
	"database/sql"
)

const getOsqueryInfo = `-- name: GetOsqueryInfo :one
SELECT 
    id,
    pid,
    uuid,
    instance_id,
    version,
    config_hash,
    config_valid,
    extensions,
    build_platform,
    build_distro,
    start_time,
    watcher,
    platform_mask,
    created_at,
    updated_at
FROM
    osquery_info
`

func (q *Queries) GetOsqueryInfo(ctx context.Context) (OsqueryInfo, error) {
	row := q.queryRow(ctx, q.getOsqueryInfoStmt, getOsqueryInfo)
	var i OsqueryInfo
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.Uuid,
		&i.InstanceID,
		&i.Version,
		&i.ConfigHash,
		&i.ConfigValid,
		&i.Extensions,
		&i.BuildPlatform,
		&i.BuildDistro,
		&i.StartTime,
		&i.Watcher,
		&i.PlatformMask,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsert = `-- name: Upsert :one
INSERT INTO osquery_info (
    pid,
    uuid,
    instance_id,
    version,
    config_hash,
    config_valid,
    extensions,
    build_platform,
    build_distro,
    start_time,
    watcher,
    platform_mask
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) ON CONFLICT (instance_id, uuid) DO UPDATE SET
    pid = $1,
    version = $4,
    config_hash = $5,
    config_valid = $6,
    extensions = $7,
    build_platform = $8,
    build_distro = $9,
    start_time = $10,
    watcher = $11,
    platform_mask = $12,
    updated_at = NOW()
RETURNING id,
          pid,
          uuid,
          instance_id,
          version,
          config_hash,
          config_valid,
          extensions,
          build_platform,
          build_distro,
          start_time,
          watcher,
          platform_mask,
          created_at,
          updated_at
`

type UpsertParams struct {
	Pid           sql.NullInt32  `json:"pid"`
	Uuid          sql.NullString `json:"uuid"`
	InstanceID    sql.NullString `json:"instance_id"`
	Version       sql.NullString `json:"version"`
	ConfigHash    sql.NullString `json:"config_hash"`
	ConfigValid   sql.NullInt32  `json:"config_valid"`
	Extensions    sql.NullString `json:"extensions"`
	BuildPlatform sql.NullString `json:"build_platform"`
	BuildDistro   sql.NullString `json:"build_distro"`
	StartTime     sql.NullInt32  `json:"start_time"`
	Watcher       sql.NullInt32  `json:"watcher"`
	PlatformMask  sql.NullInt32  `json:"platform_mask"`
}

func (q *Queries) Upsert(ctx context.Context, arg UpsertParams) (OsqueryInfo, error) {
	row := q.queryRow(ctx, q.upsertStmt, upsert,
		arg.Pid,
		arg.Uuid,
		arg.InstanceID,
		arg.Version,
		arg.ConfigHash,
		arg.ConfigValid,
		arg.Extensions,
		arg.BuildPlatform,
		arg.BuildDistro,
		arg.StartTime,
		arg.Watcher,
		arg.PlatformMask,
	)
	var i OsqueryInfo
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.Uuid,
		&i.InstanceID,
		&i.Version,
		&i.ConfigHash,
		&i.ConfigValid,
		&i.Extensions,
		&i.BuildPlatform,
		&i.BuildDistro,
		&i.StartTime,
		&i.Watcher,
		&i.PlatformMask,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
