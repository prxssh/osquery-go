// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package models

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countApplicationsStmt, err = db.PrepareContext(ctx, countApplications); err != nil {
		return nil, fmt.Errorf("error preparing query CountApplications: %w", err)
	}
	if q.getVersionStmt, err = db.PrepareContext(ctx, getVersion); err != nil {
		return nil, fmt.Errorf("error preparing query GetVersion: %w", err)
	}
	if q.listAppsStmt, err = db.PrepareContext(ctx, listApps); err != nil {
		return nil, fmt.Errorf("error preparing query ListApps: %w", err)
	}
	if q.upsertAppStmt, err = db.PrepareContext(ctx, upsertApp); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertApp: %w", err)
	}
	if q.upsertVersionsStmt, err = db.PrepareContext(ctx, upsertVersions); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertVersions: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countApplicationsStmt != nil {
		if cerr := q.countApplicationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countApplicationsStmt: %w", cerr)
		}
	}
	if q.getVersionStmt != nil {
		if cerr := q.getVersionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVersionStmt: %w", cerr)
		}
	}
	if q.listAppsStmt != nil {
		if cerr := q.listAppsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAppsStmt: %w", cerr)
		}
	}
	if q.upsertAppStmt != nil {
		if cerr := q.upsertAppStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertAppStmt: %w", cerr)
		}
	}
	if q.upsertVersionsStmt != nil {
		if cerr := q.upsertVersionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertVersionsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	countApplicationsStmt *sql.Stmt
	getVersionStmt        *sql.Stmt
	listAppsStmt          *sql.Stmt
	upsertAppStmt         *sql.Stmt
	upsertVersionsStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		countApplicationsStmt: q.countApplicationsStmt,
		getVersionStmt:        q.getVersionStmt,
		listAppsStmt:          q.listAppsStmt,
		upsertAppStmt:         q.upsertAppStmt,
		upsertVersionsStmt:    q.upsertVersionsStmt,
	}
}
